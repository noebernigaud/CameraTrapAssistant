; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "DeepFaune"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "CNRS"
#define MyAppURL "https://www.deepfaune.cnrs.fr/"
#define MyAppExeName "deepfauneGUI.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{7D903E7F-124D-48EF-9809-D6CFBC51F94D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=path\to\dist\deepfauneGUI\LICENSE.txt
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputDir=path\to\OutputDir
OutputBaseFilename=DeepFauneSetUp
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"

[Files]
Source: "path\to\dist\deepfauneGUI\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "path\to\dist\deepfauneGUI\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\jrabault\Documents\00 - CNRS PRO\01 - Projet\01 - PNRIA\01 - Projet PNRIA en cours\04 - DeepFaune\02-software\dist\deepfauneGUI\settings.ini"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[INI]
Filename: "{app}\settings.ini"; Section: "General"; Key: "language"; String: "{code:GetAppLanguage|{language}}"

[Registry]
Root: HKCU; Subkey: "Software\MyProgram"; ValueType: string; \
  ValueName: "language"; ValueData: "{code:GetAppLanguage}"
[Code]
var
  LanguagePage: TInputOptionWizardPage;
  Languages: TStrings;
  LanguageDefault: string;
  InstallerLanguage: string;

function GetAppLanguage(Param: string): string;
begin
  { Should always be true }
  if LanguagePage.SelectedValueIndex >= 0 then
    Result := Languages[LanguagePage.SelectedValueIndex];
end;

procedure AddLanguage(Code: string; Name: string);
var
  Index: Integer;
begin
  Index := LanguagePage.Add(Name);
  Languages.Add(Code);
  if Code = LanguageDefault then
  begin
    LanguagePage.Values[Index] := True;
  end;
end;

function GetLanguageValue(): string;
begin
  Result := '{app}' + '\language';
end;

procedure InitializeWizard;
begin
  { Get installer language }
  InstallerLanguage := ExpandConstant('{language}');

  { Create language page }
  Languages := TStringList.Create;

  { Add languages }
  if InstallerLanguage = 'french' then
  begin
    LanguagePage :=
      CreateInputOptionPage(
        wpSelectTasks, 'Langue du logiciel', 'Traductions disponibles :', '', True, True);
    Languages := TStringList.Create;
    AddLanguage('fr', 'Français');
    AddLanguage('en', 'Anglais');
    AddLanguage('it', 'Italien');
    AddLanguage('de', 'Allemand');
  end;
  if InstallerLanguage = 'english' then
  begin
    LanguagePage :=
        CreateInputOptionPage(
          wpSelectTasks, 'Application language', 'Available translations:', '', True, True);
    Languages := TStringList.Create;
    AddLanguage('fr', 'French');
    AddLanguage('en', 'English');
    AddLanguage('it', 'Italian');
    AddLanguage('de', 'German');
  end;
  if InstallerLanguage = 'italian' then
  begin
    LanguagePage :=
      CreateInputOptionPage(
        wpSelectTasks, 'Lingua del software', 'Traduzioni disponibili:', '', True, True);
    Languages := TStringList.Create;
    AddLanguage('fr', 'Francese');
    AddLanguage('en', 'Inglese');
    AddLanguage('it', 'Italiano');
    AddLanguage('de', 'Tedesco');
  end;
  if InstallerLanguage = 'german' then
  begin
    LanguagePage :=
      CreateInputOptionPage(
        wpSelectTasks, 'Software Sprache', 'Verfügbare Übersetzungen:', '', True, True);
    Languages := TStringList.Create;
    AddLanguage('fr', 'Französisch');
    AddLanguage('en', 'Englisch');
    AddLanguage('it', 'Italienisch');
    AddLanguage('de', 'Deutsch');
  end;
  LanguagePage.CheckListBox.Color := clBtnFace;
  LanguagePage.CheckListBox.WantTabs := True;
  LanguagePage.CheckListBox.BorderStyle := bsNone;
  LanguagePage.CheckListBox.MinItemHeight := WizardForm.TasksList.MinItemHeight;
  if LanguagePage.SelectedValueIndex < 0 then
  begin
    LanguagePage.Values[0] := True;
  end;

  { Set default value if none selected }
  if LanguagePage.SelectedValueIndex < 0 then
    LanguagePage.Values[0] := True;
end;
